 ///
 /// @file    derivedCopyControl2.cc
 /// @author  lemon(haohb13@gmail.com)
 /// @date    2018-06-25 16:31:38
 ///
 
#include <string.h>
#include <iostream>
using std::cout;
using std::endl;


class Base
{
public:
	Base()
	: _pdata(new char[1]())
	{
		cout << "Base()" << endl;
	}


	Base(const char * pdata)
	: _pdata(new char[strlen(pdata) + 1]())
	{
		cout << "Base(const char *)" << endl;
		strcpy(_pdata, pdata);
	}

	Base(const Base & rhs)
	: _pdata(new char[strlen(rhs._pdata) + 1]())
	{
		strcpy(_pdata, rhs._pdata);
		cout << "Base(const Base & )" << endl;
	}

	Base & operator=(const Base & rhs)
	{
		cout << "Base & operator=(const Base&)" << endl;
		if(this != &rhs)
		{
			delete [] _pdata;
			_pdata = new char[strlen(rhs._pdata) + 1]();
			strcpy(_pdata, rhs._pdata);
		}
		return *this;
	}

	~Base()
	{
		delete [] _pdata;
		cout << "~Base()" <<endl;
	}

	friend std::ostream & operator<<(std::ostream & os, const Base & rhs);
	
private:
	char * _pdata;
};
std::ostream & operator<<(std::ostream & os, const Base & rhs)
{
	os << rhs._pdata;
	return os;
}


//当派生类有显式定义复制控制函数，基类也有显式定义，若执行
//派生类对象之间的复制控制，则基类部分不会自动调用基类相应的复制控制函数;
//必须自己去手动调用
class Derived
: public Base
{
public:
	Derived(const char * pdata, const char * pdata2)
	: Base(pdata)
	, _pdata2(new char[strlen(pdata2) + 1]())
	{
		cout << "Derived(const char *)" << endl;
		strcpy(_pdata2, pdata2);
	}

	Derived(const Derived & rhs)
	: Base(rhs)
	, _pdata2(new char[strlen(rhs._pdata2) + 1]())
	{
		cout << "Derived(const Derived&)" << endl;
		strcpy(_pdata2, rhs._pdata2);	
	}

	Derived & operator=(const Derived & rhs)
	{
		if(this != &rhs)
		{
			Base::operator=(rhs);//必须要加上
			delete [] _pdata2;
			_pdata2 = new char[strlen(rhs._pdata2) + 1]();
			strcpy(_pdata2, rhs._pdata2);
		}
		cout << "Derived & operator=(const Derived&)" << endl;
		return *this;
	}


	friend std::ostream & operator<<(std::ostream & os, const Derived & rhs);

	~Derived()
	{
		delete [] _pdata2;
		cout << "~Derived()" << endl;
	}

private:
	char * _pdata2;
};
 
std::ostream & operator<<(std::ostream & os, const Derived & rhs)
{
	os << *(Base*)&rhs << ":";
	os << rhs._pdata2;
	return os;
}

int main(void)
{
	Derived d1("hello", ",world");
	cout << "d1 = "<< d1 << endl;
	Derived d2 = d1;
	cout << "d2 = " << d2 << endl << endl;

#if 1
	Derived d3("shenzhen", "wangdao");
	cout << "d3 = " << d3 << endl;
	d3 = d1;
	cout << "d3 = " << d3 << endl;
#endif

	return 0;
}
