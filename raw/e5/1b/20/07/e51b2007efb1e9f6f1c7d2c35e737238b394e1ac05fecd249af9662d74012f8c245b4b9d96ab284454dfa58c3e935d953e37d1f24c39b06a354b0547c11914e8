 ///
 /// @file    abuseSmartPointer.cc
 /// @author  lemon(haohb13@gmail.com)
 /// @date    2018-06-25 09:59:33
 ///
 
#include <iostream>
#include <memory>
using std::cout;
using std::endl;
using std::unique_ptr;
using std::shared_ptr;

class Point
: public std::enable_shared_from_this<Point>
{
public:
	Point(int ix, int iy)
	: _ix(ix)
	, _iy(iy)
	{	cout << "Point(int,int)" << endl;	}
	
	void print() const
	{
		cout << "(" << _ix
			 << "," << _iy
			 << ")" << endl;
	}

	//Point * addPoint(Point * rhs)
	// 
	//在类内部获取本对象的shared_ptr
	shared_ptr<Point> addPoint(Point * rhs)
	{
		_ix += rhs->_ix;
		_iy += rhs->_iy;
		//return shared_ptr<Point>(this);
		return shared_from_this();
	}


	~Point()
	{	cout << "~Point()" << endl;	}


	friend std::ostream & operator<<(std::ostream & os, const Point & rhs);
private:
	int _ix;
	int _iy;
};

std::ostream & operator<<(std::ostream & os, const Point & rhs)
{
	os << "(" << rhs._ix
	   << "," << rhs._iy
	   << ")" ;
	return os;
}

void test0(void)
{
	//把同一个裸指针交给了不同的智能指针进行托管
	Point * pt = new Point(1, 2);
	unique_ptr<Point> up(pt);
	unique_ptr<Point> up2(pt);
	up->print();
	up2->print();
}

void test1(void)
{
	Point * pt = new Point(1, 2);
	shared_ptr<Point> sp(pt);
	shared_ptr<Point> sp2(pt);
	sp->print();
	sp2->print();
}

void test2(void)
{
	shared_ptr<Point> sp(new Point(1, 2));
	shared_ptr<Point> sp2(new Point(3, 4));

	sp2.reset(sp.get());
}

void test3(void)
{
	shared_ptr<Point> sp(new Point(1, 2));
	shared_ptr<Point> sp2(new Point(3, 4));

	shared_ptr<Point> sp3(sp->addPoint(sp2.get()));
}
 
int main(void)
{
	//test1();
	//test2();
	test3();
	return 0;
}
