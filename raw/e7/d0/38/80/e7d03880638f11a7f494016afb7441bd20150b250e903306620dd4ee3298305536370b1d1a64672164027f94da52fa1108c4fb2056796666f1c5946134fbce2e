 ///
 /// @file    mem_fn.cc
 /// @author  lemon(haohb13@gmail.com)
 /// @date    2018-06-19 15:24:02
 ///
 
#include <iostream>
#include <functional>
#include <vector>
#include <algorithm>
using std::cout;
using std::endl;
using std::vector;
using std::for_each;


class Number
{
public:
	Number(int val)
	: _val(val)
	{}

	void display() const
	{	
		cout << _val << endl;
	}

	bool isEven() const
	{
		return !(_val % 2);
	}

	bool isPrimer() const
	{
		if(_val == 1)
			return false;
		for(int idx = 2; idx <= _val / 2; ++idx)
		{
			if((_val % idx) == 0)
				return false;
		}
		return true;
	}
private:
	int _val;
};

 
int main(void)
{
	vector<Number> numbers;
	for(int idx = 1; idx < 20; ++idx)
	{
		numbers.push_back(Number(idx));
	}

	for_each(numbers.begin(), numbers.end(), std::mem_fn(&Number::display));
	cout << endl;

	numbers.erase(
		remove_if(numbers.begin(), numbers.end(), std::mem_fn(&Number::isEven)),
		numbers.end());
	for_each(numbers.begin(), numbers.end(), std::mem_fn(&Number::display));
	cout << endl;

	numbers.erase(
		remove_if(numbers.begin(), numbers.end(), std::mem_fn(&Number::isPrimer)),
		numbers.end());
	for_each(numbers.begin(), numbers.end(), std::mem_fn(&Number::display));


	return 0;
}
