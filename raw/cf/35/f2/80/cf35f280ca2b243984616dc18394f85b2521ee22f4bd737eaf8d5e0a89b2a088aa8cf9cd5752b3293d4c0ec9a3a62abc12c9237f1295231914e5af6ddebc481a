 ///
 /// @file    remove.cc
 /// @author  lemon(haohb13@gmail.com)
 /// @date    2018-06-19 10:32:32
 ///
 
#include <iostream>
#include <algorithm>
#include <vector>
#include <iterator>
using std::cout;
using std::endl;
using std::remove;
using std::vector;

void test0(void)
{
	vector<int> numbers{1, 2, 66, 66, 4, 5, 7, 66, 8};

	//auto it = remove(numbers.begin(), numbers.end(), 66);
	//numbers.erase(it, numbers.end());

	//erase-remove惯用法
	numbers.erase(remove(numbers.begin(), numbers.end(), 66), numbers.end());

	std::copy(numbers.begin(), numbers.end(), std::ostream_iterator<int>(cout, " "));
	cout << endl;
} 

void test1(void)
{
	vector<int> numbers;
	numbers.push_back(1);

	//一般在容器遍历的过程中， 不要做添加或者删除元素的操作; 
	//这样做有可能导致迭代器失效
	bool flag = true;
	for(auto it = numbers.begin(); it != numbers.end(); ++it)
	{
		cout << "numbers.size() = " << numbers.size() << endl;
		cout << "numbers.capacity() = " << numbers.capacity() << endl;
		if(flag)
		{
			numbers.push_back(2);//底层发生了扩容, 原来的迭代器已经失效了
			it = numbers.begin();//重新获取迭代器
			flag = false;
		}
		cout << *it << " " << endl;
	}
	cout << endl;
}
 
int main(void)
{
//	test0();
	test1();
	return 0;
}
