 ///
 /// @file    templateAdd.cc
 /// @author  lemon(haohb13@gmail.com)
 /// @date    2018-06-14 14:51:31
 ///
 
#include <string.h>
#include <iostream>

using std::cout;
using std::endl;

//模板 --> 类型参数化 --> 代码生成器

//         实例化(模板参数推导)
//函数模板  -->  模板函数


//<>  模板参数列表
//	1. 使用class 或者typename设置类型参数
//	2. 非类型参数, 就是常量表达式（整型数据）

#if 1
template <class T>
T add(T x, T y)
{
	cout << "T add(T,T)" << endl;
	return  x + y;
}
#endif

//模板的特化版本  不能独立于通用版本
template <>
const char * add<const char *>(const char * lhs, const char * rhs)
{
	char * ptmp = new char[strlen(lhs) + strlen(rhs) + 1]();
	strcpy(ptmp, lhs);
	strcat(ptmp, rhs);
	return ptmp;
}

#if 1
// 普通函数与函数模板可以重载
int add(int x, int y)
{
	cout << "int add(int,int)" << endl;
	return x + y;
}
#endif

//函数模板与函数模板之间可以进行重载

//函数模板的声明
template <typename T>
T add(T x, T y, T z);


//对于函数模板而言，C++11之前 非类型参数不能设置默认值；
//c++11才可以
//
//整型一定是int类型吗？
//bool/char/short/int/long long  数据的表示范围不一样而已，但都是整型
template <typename T, int kNumber = 10>
T func(T x, T y)
{
	return x * y * kNumber;
}

 
int main(void)
{
	int a = 3, b = 4;
	double d1 = 1.1, d2 = 2.2, d3 = 3.3;
	char ch1 = 'a', ch2 = 2;
	const char * p1 = "hello";
	const char * p2 = "world";

	cout << "a + b = " << add(a, b) << endl;// 隐式实例化
	cout << "d1 + d2 = " << add<double>(d1, d2) << endl;//显式实例化
	cout << "ch1 + ch2 = " << add(ch1, ch2) << endl;
	cout << "d1 + d2 + d3 = " << add(d1, d2, d3) << endl;
	cout << add(p1, p2) << endl;

	cout << func<double, 12>(d1, d2) << endl;//常量传递的方式
	cout << func(d1, d2) << endl;

	//cout << "a + d1 = " << add(a, d1) << endl;//error

	return 0;
}




//函数模板的实现
template <typename T>
T add(T x, T y, T z)
{
	cout << "T add(T,T,T)" << endl;
	return x + y + z;
}
