 ///
 /// @file    Eventfd.cc
 /// @author  lemon(haohb13@gmail.com)
 /// @date    2018-07-06 11:42:47
 ///
 
#include "Eventfd.h"

#include <unistd.h>
#include <errno.h>
#include <poll.h>
#include <sys/eventfd.h>

#include <iostream>

using namespace wd;

int createEventfd()
{
	int fd = ::eventfd(0, 0);
	if(fd == -1) {
		perror("eventfd create");	
	}
	return fd;
}

Eventfd::Eventfd(Callback && cb)
: _fd(createEventfd())
, _cb(std::move(cb))
, _isStarted(false)
{

}

void Eventfd::start()
{
	_isStarted = true;

	struct pollfd pfd;
		pfd.fd = _fd;
		pfd.events = POLLIN;

	while(_isStarted)//不再监听后，退出循环
	{
		int nready = ::poll(&pfd, 1, 5000);	
		if(nready == -1 && errno == EINTR)
			continue;
		else if(nready == -1) {
			perror(">>> poll error!");
			exit(EXIT_FAILURE);
		} else if(nready == 0) {//超过5s,没有事件，返回0
			std::cout << ">>> poll timeout!" << std::endl;
		} else {
			if(pfd.revents & POLLIN) {
				handleRead();//处理eventfd
				if(_cb)
					_cb();//执行注册的回调函数（main函数中是，是创建子线程）
			}
		}
	}
}

void Eventfd::stop()
{
	_isStarted = false;
}

void Eventfd::wakeup()
{
	uint64_t one = 1;
	int nret = ::write(_fd, &one, sizeof(one));
	if(nret != sizeof(uint64_t)) {
		perror("write error");
	}
}

void Eventfd::handleRead()
{
	uint64_t howmany;
	int nret = ::read(_fd, &howmany, sizeof(uint64_t));
	if(nret != sizeof(uint64_t)) {
		perror("read error");
	}
}
