 ///
 /// @file    bind.cc
 /// @author  lemon(haohb13@gmail.com)
 /// @date    2018-06-19 11:38:56
 ///
 
#include <iostream>
#include <functional>
using std::cout;
using std::endl;
using std::bind; 

void display(void)
{
	cout << "display()" << endl;
}

void print(void)
{
	cout << "print()" << endl;
}

//函数指针
typedef void (*Function)();

//int(int,int)
int add(int x, int y)
{
	cout << "int add(int,int)" << endl;
	return x + y;
}

struct Example
{
	int add(int x, int y)
	{
		cout << "int Example::add(int,int)" << endl;
		return x + y;
	}
};

//void()
void test0(void)
{
	Function f1 = display;
	f1();

	f1 = print;
	f1();
}


//void(int, const int&)
void func(int x1, const int & x2)
{
	cout << "(" << x1
		 << "," << x2
		 << ")" << endl;
}

//void()
void test1(void)
{
	auto f1 = std::bind(add, 10, 20);
	cout << f1() << endl;

	//bind的占位符
	auto f2 = std::bind(add, 10, std::placeholders::_1);
	cout << f2(20) << endl;

	Example e;
	//std::bind绑定成员函数时，必须要在前面加上取地址&符号 
	auto f3 = std::bind(&Example::add, &e, 10, 20);
	cout << "f3() = " << f3() << endl;

	//绑定函数时，第一个参数可以兑现的地址，也可以是对象本身
	//
	//如果有形参不需要进行绑定，则必须使用占位符占住该位置
	//占位符本身所在的位置代表的是形参所在的位置，
	//占位符的数字代表的是实参传递时的位置
	//
	//
	//std::bind绑定参数时，采用的是值传递方式
	//
	auto f4 = std::bind(&Example::add, std::placeholders::_1, 10, std::placeholders::_3);
	cout << "f4(11, 20) = " << f4(&e, 20, 33) << endl;


	int x = 10;
	auto f5 = std::bind(func, x, std::cref(x));
	x = 12;
	f5();
}

void test2(void)
{
	//函数类型的容器, 类模板
	std::function<int()> f1 = std::bind(add, 10, 20);//注册回调函数
	cout << f1() << endl;//执行回调函数

	//bind是一个函数模板，bind的占位符
	std::function<int(int)> f2 = std::bind(add, 10, std::placeholders::_1);
	cout << f2(20) << endl;

	Example e;
	//std::bind绑定成员函数时，必须要在前面加上取地址&符号 
	f1 = std::bind(&Example::add, &e, 10, 20);
	cout << "f1() = " << f1() << endl;

	//绑定函数时，第一个参数可以兑现的地址，也可以是对象本身
	//
	//如果有形参不需要进行绑定，则必须使用占位符占住该位置
	//占位符本身所在的位置代表的是形参所在的位置，
	//占位符的数字代表的是实参传递时的位置
	//
	//
	//std::bind绑定参数时，采用的是值传递方式
	//
	std::function<int(Example*, int)> f4 = std::bind(&Example::add, std::placeholders::_1, 10, std::placeholders::_2);
	cout << "f4(11, 20) = " << f4(&e, 20) << endl;


	int x = 10;
	std::function<void()> f5 = std::bind(func, x, std::cref(x));
	x = 12;
	f5();
}


int main(void)
{
	test0();
	test1();
	return 0;
}
