
1. 算法的种类？什么是函数对象？
   算法：STL中通用的非成员函数。
	1.(#include <algorithm>)非修改式序列操作。find(), for_each()
	2.(#include <algorithm>)修改式序列操作。copy(), random_shuffle(),
	3.(#include <algorithm>)排序和相关操作，sort()
	4.（#include<numeric>）通用的数字运算。accumulate();
   函数对象：可以以函数的方式和（）结合的对象。
	1.函数名
	2.指向函数的指针
	3.重载了（）的对象

   
1.1 在有序的容器中进行元素查找时，采用以下哪个函数，效率更高？为什么？
   std::find 在顺序容器中查找的时间复杂度为O（n），
   std::binary_search/std::lower_bound，在在顺序容器中查找的时间复杂度为O（logn）
  一般情况下要优于find

   
1.2 迭代器失效是什么原因?如何避免出现迭代器失效的问题？
原因：容器插入或删除操作后， 容器空间发生变化，而迭代器没有变化，导致迭代器失效。
避免方法：在进行插入和删除操作后， 更新迭代器 或 遍历容器时避免使用插入和删除操作
	
   
1.3 什么是回调函数，注册回调函数，执行回调函数？
    回调函数就是一个通过函数指针调用的函数。
    如果把函数的地址作为参数传递给另一个函数，这时就注册了一个回调函数。
    当这个指针被用来调用其指向的函数时，这就执行了回调函数。


2. 了解std::allocator的用法之后,实现自定义的Vector类

1. 算法的种类？什么是函数对象？
   算法：STL中通用的非成员函数。
	1.(#include <algorithm>)非修改式序列操作。find(), for_each()
	2.(#include <algorithm>)修改式序列操作。copy(), random_shuffle(),
	3.(#include <algorithm>)排序和相关操作，sort()
	4.（#include<numeric>）通用的数字运算。accumulate();
   函数对象：可以以函数的方式和（）结合的对象。
	1.函数名
	2.指向函数的指针
	3.重载了（）的对象

   
1.1 在有序的容器中进行元素查找时，采用以下哪个函数，效率更高？为什么？
   std::find 在顺序容器中查找的时间复杂度为O（n），
   std::binary_search/std::lower_bound，在在顺序容器中查找的时间复杂度为O（logn）
  一般情况下要优于find

   
1.2 迭代器失效是什么原因?如何避免出现迭代器失效的问题？
原因：容器插入或删除操作后， 容器空间发生变化，而迭代器没有变化，导致迭代器失效。
避免方法：在进行插入和删除操作后， 更新迭代器 或 遍历容器时避免使用插入和删除操作
	
   
1.3 什么是回调函数，注册回调函数，执行回调函数？
    回调函数就是一个通过函数指针调用的函数。
    如果把函数的地址作为参数传递给另一个函数，这时就注册了一个回调函数。
    当这个指针被用来调用其指向的函数时，这就执行了回调函数。


